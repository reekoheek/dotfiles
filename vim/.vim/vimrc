"" General
""----------------------------------------------------------------------------

set nocompatible

set history=1000
set mouse=a
set ttyfast
set lazyredraw
set timeoutlen=1000
set ttimeoutlen=0
set noerrorbells
set updatetime=300

set title
set relativenumber
set number
set cursorline
set scrolloff=8
" set scrolloff=999
set colorcolumn=80,120
set signcolumn=yes

set nowrap
set encoding=utf-8 nobomb
set nostartofline

set autoread
set nobackup
set nowritebackup
set noswapfile
set hidden

set backspace=indent,eol,start
set autoindent
set smartindent

set listchars=tab:▏\ ,trail:·
set list

set hlsearch
set incsearch
set autochdir
set wildmenu
set wildignore+=*.bmp,*.gif,*.ico,*.jpg,*.png,*.psd
set wildignore+=*.pdf
set wildignore+=.DS_Store
set wildignore+=.git/*,node_modules/*,bower_components/*
set synmaxcol=2500

" set t_Co=256 " is a bad idea, set your terminal up properly instead.
let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
set termguicolors
set background=dark
set showmatch
set noshowmode
set showtabline=2
set guioptions-=e
set laststatus=2
" set cmdheight=2
" set shortmess+=c

set foldmethod=syntax
set foldlevelstart=99

" Use system clipboard -  http://vim.wikia.com/wiki/Accessing_the_system_clipboard
let uname = substitute(system('uname'), '\n', '', '')
if uname == 'Darwin'
	set clipboard=unnamed " for macOS
elseif uname == 'Linux'
	set clipboard=unnamedplus " for linux
endif

filetype plugin indent on
syntax on

"" Pre Plugins
""----------------------------------------------------------------------------

"" Plugins
""----------------------------------------------------------------------------

if !has('nvim')
	packadd! matchit
endif

call plug#begin('~/.vim/plugged')

" Theme
Plug 'morhetz/gruvbox'
Plug 'itchyny/lightline.vim'
Plug 'shinchu/lightline-gruvbox.vim'
Plug 'mengelbrecht/lightline-bufferline'

Plug 'tpope/vim-surround'
Plug 'airblade/vim-gitgutter'
Plug 'AndrewRadev/splitjoin.vim'
Plug 'junegunn/vim-easy-align', {'on': '<plug>(LiveEasyAlign)'}
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-fugitive'
Plug 'kshenoy/vim-signature'
Plug 'jiangmiao/auto-pairs'

" File navigation
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'

" File editing
Plug 'editorconfig/editorconfig-vim'
Plug 'mattn/emmet-vim'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
" Plug 'dense-analysis/ale'
Plug 'jonsmithers/vim-html-template-literals'
Plug 'sheerun/vim-polyglot'
Plug 'kevinoid/vim-jsonc'
" Plug 'leafgarland/typescript-vim'
" Plug 'pangloss/vim-javascript'
Plug 'honza/vim-snippets'
Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }

call plug#end()

"" Custom configuration
""----------------------------------------------------------------------------

colorscheme gruvbox
highlight Normal guibg=NONE ctermbg=NONE

augroup VimrcUpdated
	autocmd!
	autocmd BufWritePre *vimrc,coc-settings.json source ~/.vim/vimrc
augroup end

augroup Comment
	autocmd!
	autocmd FileType javascript setlocal commentstring=//\ %s
	autocmd FileType typescript setlocal commentstring=//\ %s
augroup end

function! ChangeBuffer(count) abort
	if a:count ==# 0
		silent! execute 'bnext'
	else
		silent! execute 'buffer ' . a:count
	endif
endfunction

command! -nargs=1 ChangeBufferCmd call ChangeBuffer(<args>)

" function! StripTrailingWhitespace ()
" 	let l = line('.')
" 	let c = col('.')
" 	%s/\s\+$//e
" 	call cursor(l, c)
" endfunction

" augroup AutoStripTrailingWhitespace
" 	autocmd!
" 	autocmd BufWritePre * call StripTrailingWhitespace()
" augroup end


"" Plugins configuration
""----------------------------------------------------------------------------

" Gruvbox
let g:gruvbox_transparent_bg = 1
let g:gruvbox_contrast_dark = 'hard'

" let g:netrw_banner = 0
" let g:netrw_winsize = 30
" let g:netrw_liststyle = 3
" let g:netrw_dirhistmax = 0
" let g:netrw_browse_split = 4
" let g:netrw_altv = 1

" Lightline
let g:lightline = {
	\ 'colorscheme': 'gruvbox',
	\ 'tabline': {'left': [['buffers']], 'right': [['']]},
	\ 'component_expand': {'buffers': 'lightline#bufferline#buffers'},
	\ 'component_type': {'buffers': 'tabsel'}
	\ }
let g:lightline.component_raw = {'buffers': 1}
" let g:lightline.separator = {'left': '', 'right': ''}
" let g:lightline.subseparator = {'left': '', 'right': ''}
let g:lightline#bufferline#show_number = 1
let g:lightline#bufferline#unnamed = '[noname]'
let g:lightline#bufferline#clickable = 1

" Go
let g:go_fmt_command = "goimports"
let g:go_auto_type_info = 1 " Status line types/signatures.

" ALE
" let g:ale_sign_error = '●'
" let g:ale_sign_warning = '●'
" let g:ale_linters = {
" 	\ 'typescript': ['eslint', 'tsserver'],
" 	\ }
" " let g:ale_lint_on_text_changed = 'never'
" " let g:ale_lint_on_insert_leave = 1
" " let g:ale_lint_on_enter = 1
" let g:ale_fixers = {
" 	\ '*': ['remove_trailing_lines', 'trim_whitespace'],
" 	\ }
" let g:ale_fix_on_save = 1
" let g:ale_completion_enabled = 1
" let g:ale_completion_autoimport = 1
" set omnifunc=ale#completion#OmniFunc

" Autopairs
let g:AutoPairsFlyMode = 1

if !exists("g:cwd")
	let g:cwd = getcwd()
endif

" Coc
let g:coc_config_home = resolve($HOME.'/.vim')
let g:coc_global_extensions = [
	\ 'coc-eslint',
	\ 'coc-json',
	\ 'coc-snippets',
	\ 'coc-tsserver',
	\ 'coc-vimlsp',
	\ 'coc-explorer',
	\ ]

"" Bind keys
""----------------------------------------------------------------------------

let mapleader=','

nnoremap Y y$
noremap <Up> <Nop>
noremap <Down> <Nop>
noremap <Left> <Nop>
noremap <Right> <Nop>
inoremap <Up> <Nop>
inoremap <Down> <Nop>
inoremap <Left> <Nop>
inoremap <Right> <Nop>

" imap <C-C> <ESC>
" nnoremap <silent> <C-J> :<C-U>m .+1<CR>==
" nnoremap <silent> <C-K> :<C-U>m .-2<CR>==
" inoremap <silent> <C-J> <Esc>:m .+1<CR>==gi
" inoremap <silent> <C-K> <Esc>:m .-2<CR>==gi
" vnoremap <silent> <C-J> :m '>+1<CR>gv=gv
" vnoremap <silent> <C-K> :m '<-2<CR>gv=gv
" inoremap jk <Esc>
" inoremap kj <Esc>

nnoremap <silent> <Leader>p :<C-U>execute printf(":Files %s", g:cwd)<CR>
nnoremap <silent> <Leader>b :<C-U>Buffers<CR>
nnoremap <silent> <Leader>e :<C-U>CocCommand explorer --sources=buffer+,file+ --position floating<CR>
" nnoremap <silent> <Leader>e :<C-U>execute printf("Lex! %s", g:cwd)<CR>
inoremap <silent> <Leader>w <ESC>:update<CR>
nnoremap <silent> <Leader>w :<C-U>update<CR>
inoremap <silent> <Leader>q <ESC>:q!<CR>
nnoremap <silent> <Leader>q :<C-U>q!<CR>

nnoremap <silent> <C-L> :<C-U>let @/ = "" <Bar> nohl<CR><C-L>

nnoremap g/ :<C-U>%s//g<Left><Left>

nnoremap <silent> gb :<C-U>ChangeBufferCmd(v:count)<CR>
nnoremap <silent> gB :<C-U>bprev<CR>

" nnoremap <silent> [a :<C-U>ALEPreviousWrap<CR>
" nnoremap <silent> ]a :<C-U>ALENextWrap<CR>
" nnoremap <silent> gd :<C-U>ALEGoToDefinition<CR>
" nnoremap <silent> <leader>a :<C-U>ALEDetail<CR>
" nnoremap <silent> <C-]> :<C-U>ALEGoToTypeDefinition<CR>

nnoremap <silent> <Leader><Leader> <C-^>

" Coc
" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

" Make <CR> auto-select the first completion item and notify coc.nvim to
" format on enter, <cr> could be remapped by other vim plugin
inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Formatting selected code.
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Applying codeAction to the selected region.
" Example: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap keys for applying codeAction to the current buffer.
nmap <leader>ac  <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
nmap <leader>qf  <Plug>(coc-fix-current)

" Map function and class text objects
" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)

" Remap <C-f> and <C-b> for scroll float windows/popups.
if has('nvim-0.4.0') || has('patch-8.2.0750')
  nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
  inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
  inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
  vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
endif

" Use CTRL-S for selections ranges.
" Requires 'textDocument/selectionRange' support of language server.
nmap <silent> <C-s> <Plug>(coc-range-select)
xmap <silent> <C-s> <Plug>(coc-range-select)

" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocAction('format')

" Add `:Fold` command to fold current buffer.
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer.
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Add (Neo)Vim's native statusline support.
" NOTE: Please see `:h coc-status` for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline.
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Mappings for CoCList
" Show all diagnostics.
nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions.
nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>
" Show commands.
nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document.
nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols.
nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list.
nnoremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>
